/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Events } from "./Events";
import { EventsCountArgs } from "./EventsCountArgs";
import { EventsFindManyArgs } from "./EventsFindManyArgs";
import { EventsFindUniqueArgs } from "./EventsFindUniqueArgs";
import { CreateEventsArgs } from "./CreateEventsArgs";
import { UpdateEventsArgs } from "./UpdateEventsArgs";
import { DeleteEventsArgs } from "./DeleteEventsArgs";
import { BookingsFindManyArgs } from "../../bookings/base/BookingsFindManyArgs";
import { Bookings } from "../../bookings/base/Bookings";
import { Venues } from "../../venues/base/Venues";
import { EventsService } from "../events.service";
@graphql.Resolver(() => Events)
export class EventsResolverBase {
  constructor(protected readonly service: EventsService) {}

  async _eventsItemsMeta(
    @graphql.Args() args: EventsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Events])
  async eventsItems(
    @graphql.Args() args: EventsFindManyArgs
  ): Promise<Events[]> {
    return this.service.eventsItems(args);
  }

  @graphql.Query(() => Events, { nullable: true })
  async events(
    @graphql.Args() args: EventsFindUniqueArgs
  ): Promise<Events | null> {
    const result = await this.service.events(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Events)
  async createEvents(@graphql.Args() args: CreateEventsArgs): Promise<Events> {
    return await this.service.createEvents({
      ...args,
      data: {
        ...args.data,

        venue: args.data.venue
          ? {
              connect: args.data.venue,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Events)
  async updateEvents(
    @graphql.Args() args: UpdateEventsArgs
  ): Promise<Events | null> {
    try {
      return await this.service.updateEvents({
        ...args,
        data: {
          ...args.data,

          venue: args.data.venue
            ? {
                connect: args.data.venue,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Events)
  async deleteEvents(
    @graphql.Args() args: DeleteEventsArgs
  ): Promise<Events | null> {
    try {
      return await this.service.deleteEvents(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Bookings], { name: "bookingsItems" })
  async findBookingsItems(
    @graphql.Parent() parent: Events,
    @graphql.Args() args: BookingsFindManyArgs
  ): Promise<Bookings[]> {
    const results = await this.service.findBookingsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Venues, {
    nullable: true,
    name: "venue",
  })
  async getVenue(@graphql.Parent() parent: Events): Promise<Venues | null> {
    const result = await this.service.getVenue(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
