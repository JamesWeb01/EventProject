/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EventsService } from "../events.service";
import { EventsCreateInput } from "./EventsCreateInput";
import { Events } from "./Events";
import { EventsFindManyArgs } from "./EventsFindManyArgs";
import { EventsWhereUniqueInput } from "./EventsWhereUniqueInput";
import { EventsUpdateInput } from "./EventsUpdateInput";
import { BookingsFindManyArgs } from "../../bookings/base/BookingsFindManyArgs";
import { Bookings } from "../../bookings/base/Bookings";
import { BookingsWhereUniqueInput } from "../../bookings/base/BookingsWhereUniqueInput";

export class EventsControllerBase {
  constructor(protected readonly service: EventsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Events })
  async createEvents(@common.Body() data: EventsCreateInput): Promise<Events> {
    return await this.service.createEvents({
      data: {
        ...data,

        venue: data.venue
          ? {
              connect: data.venue,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        date: true,
        description: true,
        id: true,
        price: true,
        title: true,
        updatedAt: true,

        venue: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Events] })
  @ApiNestedQuery(EventsFindManyArgs)
  async eventsItems(@common.Req() request: Request): Promise<Events[]> {
    const args = plainToClass(EventsFindManyArgs, request.query);
    return this.service.eventsItems({
      ...args,
      select: {
        createdAt: true,
        date: true,
        description: true,
        id: true,
        price: true,
        title: true,
        updatedAt: true,

        venue: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Events })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async events(
    @common.Param() params: EventsWhereUniqueInput
  ): Promise<Events | null> {
    const result = await this.service.events({
      where: params,
      select: {
        createdAt: true,
        date: true,
        description: true,
        id: true,
        price: true,
        title: true,
        updatedAt: true,

        venue: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Events })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEvents(
    @common.Param() params: EventsWhereUniqueInput,
    @common.Body() data: EventsUpdateInput
  ): Promise<Events | null> {
    try {
      return await this.service.updateEvents({
        where: params,
        data: {
          ...data,

          venue: data.venue
            ? {
                connect: data.venue,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          date: true,
          description: true,
          id: true,
          price: true,
          title: true,
          updatedAt: true,

          venue: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Events })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEvents(
    @common.Param() params: EventsWhereUniqueInput
  ): Promise<Events | null> {
    try {
      return await this.service.deleteEvents({
        where: params,
        select: {
          createdAt: true,
          date: true,
          description: true,
          id: true,
          price: true,
          title: true,
          updatedAt: true,

          venue: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/bookingsItems")
  @ApiNestedQuery(BookingsFindManyArgs)
  async findBookingsItems(
    @common.Req() request: Request,
    @common.Param() params: EventsWhereUniqueInput
  ): Promise<Bookings[]> {
    const query = plainToClass(BookingsFindManyArgs, request.query);
    const results = await this.service.findBookingsItems(params.id, {
      ...query,
      select: {
        bookingDate: true,
        createdAt: true,

        event: {
          select: {
            id: true,
          },
        },

        id: true,
        numberOfTickets: true,
        status: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bookingsItems")
  async connectBookingsItems(
    @common.Param() params: EventsWhereUniqueInput,
    @common.Body() body: BookingsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookingsItems: {
        connect: body,
      },
    };
    await this.service.updateEvents({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bookingsItems")
  async updateBookingsItems(
    @common.Param() params: EventsWhereUniqueInput,
    @common.Body() body: BookingsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookingsItems: {
        set: body,
      },
    };
    await this.service.updateEvents({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bookingsItems")
  async disconnectBookingsItems(
    @common.Param() params: EventsWhereUniqueInput,
    @common.Body() body: BookingsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookingsItems: {
        disconnect: body,
      },
    };
    await this.service.updateEvents({
      where: params,
      data,
      select: { id: true },
    });
  }
}
