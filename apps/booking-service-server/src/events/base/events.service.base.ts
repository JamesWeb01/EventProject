/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Events as PrismaEvents,
  Bookings as PrismaBookings,
  Venues as PrismaVenues,
} from "@prisma/client";

export class EventsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.EventsCountArgs, "select">): Promise<number> {
    return this.prisma.events.count(args);
  }

  async eventsItems(args: Prisma.EventsFindManyArgs): Promise<PrismaEvents[]> {
    return this.prisma.events.findMany(args);
  }
  async events(
    args: Prisma.EventsFindUniqueArgs
  ): Promise<PrismaEvents | null> {
    return this.prisma.events.findUnique(args);
  }
  async createEvents(args: Prisma.EventsCreateArgs): Promise<PrismaEvents> {
    return this.prisma.events.create(args);
  }
  async updateEvents(args: Prisma.EventsUpdateArgs): Promise<PrismaEvents> {
    return this.prisma.events.update(args);
  }
  async deleteEvents(args: Prisma.EventsDeleteArgs): Promise<PrismaEvents> {
    return this.prisma.events.delete(args);
  }

  async findBookingsItems(
    parentId: string,
    args: Prisma.BookingsFindManyArgs
  ): Promise<PrismaBookings[]> {
    return this.prisma.events
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookingsItems(args);
  }

  async getVenue(parentId: string): Promise<PrismaVenues | null> {
    return this.prisma.events
      .findUnique({
        where: { id: parentId },
      })
      .venue();
  }
}
