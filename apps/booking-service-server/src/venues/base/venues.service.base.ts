/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Venues as PrismaVenues,
  Events as PrismaEvents,
} from "@prisma/client";

export class VenuesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.VenuesCountArgs, "select">): Promise<number> {
    return this.prisma.venues.count(args);
  }

  async venuesItems(args: Prisma.VenuesFindManyArgs): Promise<PrismaVenues[]> {
    return this.prisma.venues.findMany(args);
  }
  async venues(
    args: Prisma.VenuesFindUniqueArgs
  ): Promise<PrismaVenues | null> {
    return this.prisma.venues.findUnique(args);
  }
  async createVenues(args: Prisma.VenuesCreateArgs): Promise<PrismaVenues> {
    return this.prisma.venues.create(args);
  }
  async updateVenues(args: Prisma.VenuesUpdateArgs): Promise<PrismaVenues> {
    return this.prisma.venues.update(args);
  }
  async deleteVenues(args: Prisma.VenuesDeleteArgs): Promise<PrismaVenues> {
    return this.prisma.venues.delete(args);
  }

  async findEventsItems(
    parentId: string,
    args: Prisma.EventsFindManyArgs
  ): Promise<PrismaEvents[]> {
    return this.prisma.venues
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .eventsItems(args);
  }
}
