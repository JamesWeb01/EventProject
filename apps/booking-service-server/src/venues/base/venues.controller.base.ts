/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VenuesService } from "../venues.service";
import { VenuesCreateInput } from "./VenuesCreateInput";
import { Venues } from "./Venues";
import { VenuesFindManyArgs } from "./VenuesFindManyArgs";
import { VenuesWhereUniqueInput } from "./VenuesWhereUniqueInput";
import { VenuesUpdateInput } from "./VenuesUpdateInput";
import { EventsFindManyArgs } from "../../events/base/EventsFindManyArgs";
import { Events } from "../../events/base/Events";
import { EventsWhereUniqueInput } from "../../events/base/EventsWhereUniqueInput";

export class VenuesControllerBase {
  constructor(protected readonly service: VenuesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Venues })
  async createVenues(@common.Body() data: VenuesCreateInput): Promise<Venues> {
    return await this.service.createVenues({
      data: data,
      select: {
        capacity: true,
        createdAt: true,
        id: true,
        location: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Venues] })
  @ApiNestedQuery(VenuesFindManyArgs)
  async venuesItems(@common.Req() request: Request): Promise<Venues[]> {
    const args = plainToClass(VenuesFindManyArgs, request.query);
    return this.service.venuesItems({
      ...args,
      select: {
        capacity: true,
        createdAt: true,
        id: true,
        location: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Venues })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async venues(
    @common.Param() params: VenuesWhereUniqueInput
  ): Promise<Venues | null> {
    const result = await this.service.venues({
      where: params,
      select: {
        capacity: true,
        createdAt: true,
        id: true,
        location: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Venues })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVenues(
    @common.Param() params: VenuesWhereUniqueInput,
    @common.Body() data: VenuesUpdateInput
  ): Promise<Venues | null> {
    try {
      return await this.service.updateVenues({
        where: params,
        data: data,
        select: {
          capacity: true,
          createdAt: true,
          id: true,
          location: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Venues })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVenues(
    @common.Param() params: VenuesWhereUniqueInput
  ): Promise<Venues | null> {
    try {
      return await this.service.deleteVenues({
        where: params,
        select: {
          capacity: true,
          createdAt: true,
          id: true,
          location: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/eventsItems")
  @ApiNestedQuery(EventsFindManyArgs)
  async findEventsItems(
    @common.Req() request: Request,
    @common.Param() params: VenuesWhereUniqueInput
  ): Promise<Events[]> {
    const query = plainToClass(EventsFindManyArgs, request.query);
    const results = await this.service.findEventsItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        date: true,
        description: true,
        id: true,
        price: true,
        title: true,
        updatedAt: true,

        venue: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/eventsItems")
  async connectEventsItems(
    @common.Param() params: VenuesWhereUniqueInput,
    @common.Body() body: EventsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      eventsItems: {
        connect: body,
      },
    };
    await this.service.updateVenues({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/eventsItems")
  async updateEventsItems(
    @common.Param() params: VenuesWhereUniqueInput,
    @common.Body() body: EventsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      eventsItems: {
        set: body,
      },
    };
    await this.service.updateVenues({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/eventsItems")
  async disconnectEventsItems(
    @common.Param() params: VenuesWhereUniqueInput,
    @common.Body() body: EventsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      eventsItems: {
        disconnect: body,
      },
    };
    await this.service.updateVenues({
      where: params,
      data,
      select: { id: true },
    });
  }
}
